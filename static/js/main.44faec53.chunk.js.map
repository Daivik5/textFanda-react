{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","onClick","toggleMode","role","htmlFor","defaultProps","aboutText","words","TextForm","useState","text","setText","heading","value","onChange","event","target","split","length","style","backgroundColor","rows","newText","toUpperCase","showAlert","newVar","toLowerCase","ntext","document","getElementById","navigator","clipboard","writeText","Alert","alert","word","lower","charAt","slice","capitalize","msg","App","setmode","setalert","message","setTimeout","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.44faec53.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n// import { a } from 'react-router-dom';\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <div>\r\n      <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n        <div className=\"container-fluid\">\r\n          <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n          <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n          </button>\r\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n            <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n              <li className=\"nav-item\">\r\n                <a className=\"nav-link active\" aria-current=\"page\" href=\"/\">Home</a>\r\n              </li>\r\n              {/* <li className=\"nav-item\">\r\n                <a className=\"nav-link\" href=\"#\">{props.aboutText}</a>\r\n              </li> */}\r\n            </ul>\r\n            {/* <form className=\"d-flex\">\r\n              <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" />\r\n              <button className=\"btn  btn-primary\" type=\"submit\">Search</button>\r\n            </form> */}\r\n            <div className={`form-check form-switch text-${props.mode === 'light' ? 'dark' : 'light'}`}>\r\n              <input className=\"form-check-input\" type=\"checkbox\" onClick={props.toggleMode} role=\"switch\" id=\"flexSwitchCheckDefault\" />\r\n              <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable DarkMode</label>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </nav>\r\n    </div>\r\n  )\r\n}\r\nNavbar.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  aboutText: PropTypes.string.isRequired\r\n}\r\nNavbar.defaultProps = {\r\n  title: 'Give Text here',\r\n  aboutText: 'Give About Text here'\r\n};","import React, { useState } from 'react'\r\n\r\nlet words = 0;\r\nexport default function TextForm(props) {\r\n    const [text, setText] = useState(\"\");\r\n    const handleUpClick = () => {\r\n        let newText = text.toUpperCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to Upper case\", \"success\");\r\n    }\r\n    const handleDownClick = () => {\r\n        let newVar = text.toLowerCase();\r\n        setText(newVar);\r\n        props.showAlert(\"Converted to Lower case\", \"success\");\r\n    }\r\n    const handleOnChange = (event) => {\r\n        // console.log(\"onchange\");\r\n        setText(event.target.value);\r\n        if (text !== null) {\r\n            words = text.split(\" \").length\r\n        }\r\n\r\n    }\r\n\r\n    const handleClearClick = () => {\r\n        setText(\"\");\r\n        words = 0;\r\n        props.showAlert(\"Cleared Text\", \"success\");\r\n    }\r\n    const handleCopy = () => {\r\n        if (text !== null) {\r\n            let ntext = document.getElementById(\"Mybox\");\r\n            // console.log(ntext);\r\n            // ntext.select();\r\n            navigator.clipboard.writeText(ntext.value);\r\n            props.showAlert(\"Text copied to clipboard!\", \"success\");\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className={`container my-3 text-${props.mode === 'light' ? 'dark' : 'light'}`}>\r\n                <h1 className=\"my-2\">{props.heading}</h1>\r\n                <div className=\"mb-3\">\r\n                    {/* <label for=\"Mybox\" className=\"form-label\">Example textarea</label> */}\r\n                    <textarea className={`form-control text-${props.mode === 'light' ? 'dark' : 'light'}`} id=\"Mybox\" value={text} onChange={handleOnChange} style={{ backgroundColor: props.mode === 'dark' ? '#505050' : 'white' }} rows=\"10\"></textarea>\r\n                </div>\r\n                <button className=\"btn btn-primary\" onClick={handleUpClick}> Convert to UpperCase</button>\r\n                <button className=\"btn btn-primary mx-3\" onClick={handleDownClick}> Convert to LowerCase</button>\r\n                <button className=\"btn btn-primary mx-3\" onClick={handleCopy}> Copy Text</button>\r\n                <button className=\"btn btn-primary mx-3\" onClick={handleClearClick}> Clear Text</button>\r\n            </div>\r\n            <div className={`container text-${props.mode === 'light' ? 'dark' : 'light'} my-3`}>\r\n                <h2>Your text summary</h2>\r\n                <p> {words} <b>words</b> and {text.length} <b>characters</b></p>\r\n                <p> {0.008 * words} <b>minutes</b> to read</p>\r\n                <h2>Preview</h2>\r\n                <p>{text.length > 0 ? text : \"Enter Some Text into the box to preview it here\"}</p>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nfunction Alert(props) {\r\n    const capitalize = (word) => {\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n    return (\r\n        props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n            {capitalize(props.alert.type)} : {props.alert.msg}\r\n            {/* <button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"alert\" aria-label=\"Close\"></button> */}\r\n        </div>\r\n        // </div>\r\n    )\r\n}\r\n\r\nexport default Alert\r\n","\nimport './Appa.css';\n// import About from './components/About';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport React, { useState } from 'react';\nimport Alert from './components/Alert';\n// import {\n//   BrowserRouter as Router,\n//   Switch,\n//   Route,\n// } from \"react-router-dom\";\n\nfunction App() {\n  // let daksl=\"daivik\";\n  const [mode, setmode] = useState('light');\n  const [alert, setalert] = useState(null);\n  const showAlert = (message, type) => {\n    setalert({\n      msg: message,\n      type: type\n    })\n    setTimeout(() => {\n      setalert(null);\n    }, 1500);\n  }\n  const toggleMode = () => {\n    if (mode === 'light') {\n      setmode('dark')\n      document.body.style.backgroundColor = '#282828';\n      showAlert(\"Dark mode has enabled\", \"success\");\n    }\n    else {\n      setmode('light')\n      document.body.style.backgroundColor = 'white';\n      showAlert(\"Light mode has enabled\", \"success\");\n    }\n  }\n  return (\n    <>\n      {/* <Router> */}\n      <Navbar title=\"TextFanda\" aboutText=\"About Us\" mode={mode} toggleMode={toggleMode} />\n      <Alert alert={alert} />\n      <div className=\"container my-3\">\n        {/* <Switch>\n            <Route exact path=\"/about\">\n              <About />\n            </Route>\n            <Route exact path=\"/\"> */}\n        <TextForm heading=\"Enter the text to analyze below\" showAlert={showAlert} mode={mode} />\n        {/* </Route>\n          </Switch> */}\n      </div>\n      {/* </Router> */}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}